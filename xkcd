#!/usr/bin/env bash
#
# XKCD
#
# Display a XCKD comic on kitty terminalxkcd-command.png
#
# Requires: - Kitty terminal (https://sw.kovidgoyal.net/kitty/) with icat kitten
#           - ImageMagick (https://www.imagemagick.org/),
#           - Common utilities found in unix-like systems: curl, grep, cut, perl.
#
# Usage:However, both methods produce a similar size script.
# Run 'xkcd --help' to find out
#
# Author: Rob O'Leary
# Date: 24/02/22

URL=https://xkcd.com/
img=""
title=""
scale=100
latest=false
random=false

function parse() {
	temp_file=$(mktemp)
	curl -s -L $URL > "$temp_file"
	img="https:$(grep 'img src.* title=".*' "$temp_file" | cut -d '"' -f 2)"
	
	# we need to decode HTML entities e.g &quot; to display text correctly
	title="$(grep 'img src.* title=".*' "$temp_file" | cut -d '"' -f 4 | perl -MHTML::Entities -pe 'decode_entities($_);')"

	rm "$temp_file"
}

function show(){
	parse
	echo ""

	if [ $scale -eq 100 ]; then
		kitty +kitten icat --align left "$img"
	else
		temp_file=$(mktemp)
		convert "$img" -resize $scale% $temp_file
		kitty +kitten icat --align left $temp_file

		# Wait until the file is no longer being accessed by kitty
		while [[ -f "$temp_file" && -n "$(lsof -t "$temp_file")" ]]; do
		  sleep 0.1
		done

		rm "$temp_file"
	fi

	echo ""
	echo "$title"
}

function show_random(){
	URL=https://c.xkcd.com/random/comic
	show
}

function help() {
    fmt_help="  %-22s\t%-54s\n"

    echo "Description: Display XKCD comic in the terminal."
    echo ""
    echo "Usage: xkcd [-l|--latest] [-r|--random] [-h|--help] [-s scale]"
    printf "${fmt_help}" \
        "-h, --help" "Print the help page." \
        "-l, --latest" "Show the latest comic." \
        "-r, --random" "Show a random comic." \
	"-s, --scale percentage" "Scale the image by percentage (requires Imagemagick)."
}


while getopts ":hlrs:" opt; do
  case ${opt} in
    h)
      help
      exit 0
      ;;
    l)
      latest=true
      ;;
    r)
      random=true
      ;;
    s)
      scale=${OPTARG}
      ;;
    :)
      echo "Error: Option -$OPTARG requires an argument."
      exit 1
      ;;
    \?)
      echo "Error: Invalid option -$OPTARG"
      exit 1
      ;;
    *) # Invalid parameter without a leading dash
      echo "Error: Invalid option -$OPTARG"
      exit 1
      ;;
  esac
done

shift "$((OPTIND-1))"
for arg do
  echo "Error: Invalid argument '$arg'."
  echo ""
  help
  exit 1
done

if [ $OPTIND -eq 1 ]; then
    help
    exit 0
fi

if [ $latest = true ] && [ $random = true ]; then
  echo "Error: Both -l and -r options were supplied. Only one option is allowed."
  exit 0
elif [ $latest = true ]; then
  show
  exit 0
else
  show_random
  exit 0
fi
